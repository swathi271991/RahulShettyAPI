/*Use this command --> go to project path

mvn test -Dcucumber.filter.tags="@executeThese and not @WIP"
This will execute @executeThese tag ignoring @WIP. You can find several variation of Cucumber command line here 


mvn test -Dcucumber.filter.tags="@AddPlace" --> it will run only addplace api tag tests
mvn test -Dcucumber.filter.tags="@DeletePlace"  --> it will run only deleteplace api tag tests

*/


package stepDefinations;

import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import resources.APIResource;
import resources.Utils;
import static io.restassured.RestAssured.*;
import java.io.FileNotFoundException;

import org.junit.Assert;

import Payloads.PlacePayloads;

public class stepDefination1 extends Utils{


	RequestSpecification httpreq;
	Response resp;
	public static String place_id;

	@Given("^Add Place PayLoad using (.+) (.+) and (.+)$")
	public void add_place_payload_using_and(String name, String address, String language) throws FileNotFoundException {

		httpreq = given().log().all().spec(requestSpec()).body(PlacePayloads.addPlacePayload(name, address, language));

	}


	@When("^user calls \"([^\"]*)\" using \"([^\"]*)\" Http request$")
	public void user_calls_something_using_something_http_request(String resource, String method) throws Throwable {


		APIResource resourcename = APIResource.valueOf(resource);
		System.out.println(resourcename.getResource());

		if(method.equalsIgnoreCase("POST"))
		{
			resp = httpreq.when().post(resourcename.getResource()).then().log().all().spec(responseSpec()).extract().response();
		}
		else if(method.equalsIgnoreCase("GET"))
		{
			resp = httpreq.when().get(resourcename.getResource()).then().log().all().spec(responseSpec()).extract().response();
		}
		else if(method.equalsIgnoreCase("DELETE"))
		{
			resp = httpreq.when().delete(resourcename.getResource()).then().log().all().spec(responseSpec()).extract().response();
		}	
	}


	@Then("the API call should be success with status code {int}")
	public void the_api_call_should_be_success_with_status_code(Integer expectedstatuscode) {

		int actualstatuscode = resp.getStatusCode();
		Assert.assertTrue(actualstatuscode==expectedstatuscode);

	}


	@And("{string} in response body is {string}")
	public void in_response_body_is(String key, String value) {


		String keyvalue = getJsonPath(resp, key);
		Assert.assertEquals(keyvalue, value);


	}

	@And("^verify placeid generated by calling \"([^\"]*)\" using \"([^\"]*)\" http request$")
	public void verify_placeid_generated_by_calling_something_using_something_http_request(String resource, String method) throws Throwable {


		place_id = getJsonPath(resp, "place_id");

		httpreq = given().log().all().spec(requestSpec()).queryParam("place_id", place_id);
		user_calls_something_using_something_http_request(resource, method);

	}
	
	
    @Given("^Placeid which needs to be deleted$")
    public void placeid_which_needs_to_be_deleted() throws Throwable {
        
    	
    	
    	httpreq = given().log().all().spec(requestSpec()).body(PlacePayloads.deletePlacePayLoad(place_id));
 
    	
    	
    }
	
	





}
